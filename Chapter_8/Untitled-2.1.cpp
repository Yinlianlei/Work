#include<iostream>
using namespace std;
int A=4;
const int W=3;//在C++看来和使用了static一样
int main(void)
{
	//在默认情况下，函数中声明的函数参数和变量的储存持续性我自动，作用域为局部，没有链续性
	int A=1;
    {
        int A=3;//旧的定义将会被新的定义隐藏//暂时性的
        //不同的代码块储存变量值的地址不同
        cout << A << endl;
        cout << ::A << endl;//::解析运算符//此为调用变量的全局变量版本
    }
	//auto几乎不使用，主要用途为指出当前的变量为局部自动变量
    //由于自动变量（例：int A）的数目随着函数的开始和结束而增减
    //因此程序必须在运行是对自动变量进行管理
    //常用办法是保留一段内存，视其为栈//新数据被象征性的放在原有数据的上面//放在相邻的内存单元中而不是同一个内存单元中
    //程序用完便从栈中删除

    //程序使用两个程序追踪栈：一个指向栈顶（栈开始的地方），一个指向堆顶（下一个可用内存单元）
    //栈后进先出，最后加入的变量最先被弹出//优化了参数传递//新加入的值没有被删除只是不再被标记
	
    //寄存器变量：
    //register int B=3;
    //使用CPU寄存及来储存自动变量//直再提高访问速度
    //使用的唯一原因是程序员想用一个自动变量，这个变量可能与外部变量相同

    //静态持续变量（三种链接性）//都在整个程序执行期间存在
    //外部链接性（可在其他文件中访问），内部链接性（只能在当前文件中访问）和无链接性（只能在当然函数或代码块中访问）
	//不需要栈来进行管理//若没有初始化则会被设置为零

    //所有静态持续变量都有下述初始化特征，未被初始化的静态变量的所有位都被设置为0
    //零初始化和常量初始化被称为静态初始化：处理文件是初始化变量
    //动态初始化意味着变量将在编译后初始化，例如后面时表达式
    
    //多个文件种，需要同时都定义才能够使用外部链接性变量
    //关键字extern非必须//只是声明此为外部变量

    //外部变量只能在一个文件中定义一个，且其他文件在使用时必须加上extern的关键字
    //若需要定义一个和全局变量名称一样的局部变量，可以在前面加上一个static

    //thread_local指出变量的持续性于其所属的线程的持续性一样，和静态变量在程序中一样
    //volatile即使程序没有对内存单元进行修改，其值也可能发生变化//用于改善编译器的优化能力
    //就例如对一个值进行两次调用，编译器会将其放置于寄存器中，加上关键字后会高数编译器不进行寄存器放置

    //mutable，指出其结构(类)为const，其某个成员也可以被修改
    struct AAA
    {
        int BA;
        mutable int B;
    };
    const AAA SA={2,3};
    SA.B+=2;//就等于说const后的结构中的成员可以被修改
    cout << SA.B << endl;
    void ES();
    return 0;
}

int D;//外部链接性声明
static int E;//内部链接性声明

void ES()
{
    static int A;//无链接性声明
}

/*//若必须在类当中使用const，则所有的类成员函都必须加上const
#include<iostream>
using namespace std;
class test
{
private:
	int A;
	mutable int B;
public:
	test(int C, int D)
	{
		A = C;
		B = D;
	}
	void change(int E, int F) const
	{
		B = E * F;
	};
	void show() const
	{
		cout << A << " " << B << endl;
	}
};
int main(void)
{
	const test AA(12, 34);
	AA.change(4, 5);
	AA.show();
	return 0;
}

*/
