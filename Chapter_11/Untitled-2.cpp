#include<iostream>
#include".h\Chapter_11.h"
using namespace std;
int main(void)
{
	test1 A(8,8);
	//默认构造函数
	//一般来说若不进行显示初始化，则会使内部的成员的数值未知
	//显式初始化则可以设置成特殊的值
	//但是不能和其他构造函数产生二义性

	test1 B=A;//test1 B=test1(A);
	B.show();
	//复制构造函数
	//一般的复制构造函数为test1(const test1 &)之类
	//四种常见的复制调用方法：
	test1 T1(A),T2=A,T3=test1(A),*T4=new test1(A);//第一二个为隐式调用，三四个为显示调用
	//此过程中会生成一个临时变量供返回，同时由于
	T1.show();
	T2.show();
	T3.show();
	T4->show();//此无析构函数
	//推荐使用引用传递对象给复制构造函数以便减少内存空间的使用
	//默认的复制构造函数时诸葛复制非静态成员(成员赋值也称为浅复制)
	//若两个指针指向同一个new分配的内存空间，delete后则会导致两个指针读取乱码

	//深度复制：
	//浅度复制存在可能会将数据地址传去导致两个指针指向同一个地址的情况
	//深度复制则会创建一个副本并将地址赋予调用的类对象
	//原因即：一些使用new初始化的，指向数据的指针，浅度复制仅是传递给与被复制者地址，而非一个复制的副本
	//在复制构造函数中对于此类进行重新new一个作为临时副本用于返回即可做到升读复制
	//因而：若类中包含有new成员，则应该定义一个复制构造函数用于深度复制

	//浅复制只是复制指针值，而不会深入挖掘以复制指针引用的结构
	


	return 0;
}
